/**
* Remark steven.zhu ECP3459 not setting response extension date being work item extension date by default so
*					removed one assertion
* @description 
*/
/*Amendment Caterina Cuccurullo ECP-3007 Added assignment of Enquiry_Origin for Inbound Enquiry Work Items.
 *          Date 07-10-2016
 */     
@isTest
private class RecordOutcomesNewExCon_Test {
    @testSetup static void setupData(){
        Record_Outcomes__c ro = new Record_Outcomes__c();
        ro.Name = '1';
        ro.Delivery_Mode__c = 'Call';
        ro.Work_Item_Type__c = 'Courtesy contact';
        ro.Outcomes__c = 'Call Successful,Cannot Locate a Number,Scheduled Appointment,Scheduled Follow-up,Escalated,Sent Replacement Questionnaire,Data Taken Over The Phone,Advised Data Sent';
        insert ro;
        Record_Outcomes__c ro1 = new Record_Outcomes__c();
        ro1.Name = '2';
        ro1.Delivery_Mode__c = 'Call';
        ro1.Work_Item_Type__c = 'Non-response follow-up';
        ro1.Outcomes__c = 'Call Successful,Cannot Locate a Number,Scheduled Appointment,Scheduled Follow-up,Escalated,Sent Replacement Questionnaire,Data Taken Over The Phone,Advised Data Sent';
        insert ro1;
        Work_Item_Outcomes_Config__c wio = new Work_Item_Outcomes_Config__c();
        wio.Name = 'Census';
        wio.Follow_up_Outcomes__c = 'Sent Replacement Questionnaire,Advised Data Sent,Scheduled Appointment,Scheduled Follow-up';
        insert wio;
        Work_Item_Outcomes_Config__c wio1 = new Work_Item_Outcomes_Config__c();
        wio1.Name = 'Business';
        wio1.Follow_up_Outcomes__c = 'Sent Replacement Questionnaire,Advised Data Sent,Scheduled Appointment,Scheduled Follow-up';
        insert wio1;
        TestDataHelper.createResponseProperties();
    }

    @isTest static void testMethod1(){
        User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
            colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
			insert colIns;
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = false;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Courtesy contact';
            wi1.Status__c = 'New';
			wi1.Approval_Status__c='Approved';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
            insert wi1;
            wi1 = [Select Id,Response_Extension_Date__c,Contact__r.Notes__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            test.startTest();
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
			ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = null;
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Sent Replacement Questionnaire';
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Escalated';
            ro.setCallback();
            ro.taskObj.Escalation_Reason__c = 'Extension';
            ro.setExtensionDate();
            wi1.Response__r.Extension_Date__c = system.today().addDays(10);
            ro.save();
            wi1.Response__r.Extension_Date__c = system.today().addDays(20);
            ro.save();
            test.stopTest();
            system.assertEquals(system.today().addDays(20), wi1.Response__r.Extension_Date__c);
            //system.assertEquals(wi1.Response__r.Extension_Date__c , wi1.Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,wi1.Response__r.Collection_Instance__r.Extension_Cut_off_Date__c);
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Pending', wi1.Status__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
        }
    }
    @isTest static void testMethod2(){
        User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,true);
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = false;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Courtesy contact';
            wi1.Status__c = 'New';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
            insert wi1;
            wi1 = [Select Id,Contact__r.Notes__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            test.startTest();
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
            ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = 'Advised Data Sent';
            wi1.New_Call_Back_Time__c = system.now().addDays(1);
            ro.setCallback();
            ro.save();
            test.stopTest();
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Completed', wi1.Status__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
        }
    }
    @isTest static void testMethod3(){
        User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
            colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
			insert colIns;
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = false;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Non-response follow-up';
            wi1.Status__c = 'New';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
            insert wi1;
            wi1 = [Select Id,New_Call_Back_Time__c,Response_Extension_Date__c,Contact__r.Notes__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            test.startTest();
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
            ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = 'Sent Replacement Questionnaire';
            ro.setCallback();
            system.assertEquals(Datetime.newInstance(wi1.Response_Extension_Date__c.addDays(1), Time.newInstance(0, 0, 0, 0)),ro.taskObj.New_Call_Back_Time__c);
            ro.taskObj.Outcome__c = 'Scheduled Follow-up';
            ro.setCallback();
            //system.assertEquals(wi1.Response_Extension_Date__c,wi1.Response__r.Extension_Date__c);
            wi1.Response__r.Extension_Date__c = ro.taskObj.New_Call_Back_Time__c.date().addDays(-1);
            ro.save();
            wi1.Response__r.Extension_Date__c = system.today().addDays(-1);
            ro.save();
            ro.taskObj.Outcome__c = 'Escalated';
            ro.taskObj.Escalation_Reason__c = 'Extension';
            wi1.Response__r.Extension_Date__c = wi1.Response__r.Collection_Instance__r.Extension_Cut_off_Date__c.addDays(-1);
            ro.save();
            ro.taskObj.Outcome__c = 'Scheduled Follow-up';
            ro.taskObj.Escalation_Reason__c = NULL;
            ro.taskObj.New_Call_Back_Time__c = system.today().addDays(20);
            wi1.Response__r.Extension_Date__c = system.today().addDays(11);
            ro.save();
            system.assert(ro.taskObj.Escalation_Reason__c == NULL,ro.taskObj.Escalation_Reason__c);
            system.assert(ro.taskObj.Outcome__c.containsIgnoreCase('Scheduled Follow-up'),ro.taskObj.Outcome__c);
            system.assert(wi1.Response__r.Extension_Date__c > wi1.Response__r.Collection_Instance__r.Extension_Cut_off_Date__c, wi1.Response__r.Extension_Date__c+'=='+wi1.Response__r.Collection_Instance__r.Extension_Cut_off_Date__c);
            ro.taskObj.New_Call_Back_Time__c = system.today().addDays(2);
            wi1.Response__r.Extension_Date__c = system.today().addDays(1);
            ro.save();
            test.stopTest();
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Pending', wi1.Status__c,wi1.Response__r.Extension_Date__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
        }
    }
    @isTest static void testQueues1(){
        User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
            colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
			insert colIns;
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = false;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Courtesy contact';
            wi1.Status__c = 'New';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
            insert wi1;
            wi1 = [Select Id,Response_Extension_Date__c,Contact__r.Notes__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            test.startTest();
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
            ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = null;
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Sent Replacement Questionnaire';
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Escalated';
            ro.setCallback();
            ro.taskObj.Escalation_Reason__c = 'Extension';
            ro.setExtensionDate();
            wi1.Response__r.Extension_Date__c = system.today().addDays(20);
            ro.save();
            system.assertEquals(system.today().addDays(20), wi1.Response__r.Extension_Date__c);
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Pending', wi1.Status__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
            List<String> queue = new List<String>{'LBU_Escalation_Queue','CC_Escalation_Queue','CC_Admin_Team_Queue','Supplier_Management_Advisers_Queue'};
            Group gr = [Select Id from Group where DeveloperName = 'CC_Escalation_Queue' and Type='Queue'];
            system.assertEquals(gr.Id,wi1.OwnerId,gr.Id+'=='+wi1.OwnerId);
            test.stopTest();
        }
    }
    @isTest static void testQueues2(){
        User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
            colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
			insert colIns;
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = false;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Courtesy contact';
            wi1.Status__c = 'New';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
            insert wi1;
            wi1 = [Select Id,Contact__r.Notes__c,Response_Extension_Date__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            test.startTest();
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
            ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = null;
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Sent Replacement Questionnaire';
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Escalated';
            ro.setCallback();
            ro.taskObj.Escalation_Reason__c = 'Business Structural Changes';
            ro.save();
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Pending', wi1.Status__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
            List<String> queue = new List<String>{'LBU_Escalation_Queue','CC_Escalation_Queue','CC_Admin_Team_Queue','Supplier_Management_Advisers_Queue'};
            Group gr = [Select Id from Group where DeveloperName = 'CC_Admin_Team_Queue' and Type='Queue'];
            system.assertEquals(gr.Id,wi1.OwnerId,gr.Id+'=='+wi1.OwnerId);
            test.stopTest();
        }
    }
    
    @isTest 
    static void testQueues3(){
        User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
            colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
			insert colIns;
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = false;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            test.startTest();
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Courtesy contact';
            wi1.Status__c = 'New';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
            insert wi1;
            wi1 = [Select Id,Contact__r.Notes__c,Response_Extension_Date__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
            ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = null;
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Sent Replacement Questionnaire';
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Escalated';
            ro.setCallback();
            ro.taskObj.Escalation_Reason__c = 'Feedback';
            ro.save();
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Pending', wi1.Status__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
            List<String> queue = new List<String>{'LBU_Escalation_Queue','CC_Escalation_Queue','CC_Admin_Team_Queue','Supplier_Management_Advisers_Queue'};
            Group gr = [Select Id from Group where DeveloperName = 'Supplier_Management_Advisers_Queue' and Type='Queue'];
            system.assertEquals(gr.Id,wi1.OwnerId,gr.Id+'=='+wi1.OwnerId);
            test.stopTest();
        }
    }
    @isTest static void testQueues4(){
        User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
            colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
			insert colIns;
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = true;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            test.startTest();
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Courtesy contact';
            wi1.Status__c = 'New';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
            insert wi1;
            wi1 = [Select Id,Contact__r.Notes__c,Response_Extension_Date__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
            ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = null;
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Sent Replacement Questionnaire';
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Escalated';
            ro.setCallback();
            ro.taskObj.Escalation_Reason__c = 'xxxxxx';
            ro.save();
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Pending', wi1.Status__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
            List<String> queue = new List<String>{'LBU_Escalation_Queue','CC_Escalation_Queue','CC_Admin_Team_Queue','Supplier_Management_Advisers_Queue'};
            Group gr = [Select Id from Group where DeveloperName = 'LBU_Escalation_Queue' and Type='Queue'];
            system.assertEquals(gr.Id,wi1.OwnerId,gr.Id+'=='+wi1.OwnerId);
            test.stopTest();
        }
    }
    @isTest static void testQueues5(){
        User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
            colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
			insert colIns;
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = false;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            test.startTest();
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Courtesy contact';
            wi1.Status__c = 'New';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
            insert wi1;
            wi1 = [Select Id,Contact__r.Notes__c,Response_Extension_Date__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
            ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
 			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = null;
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Sent Replacement Questionnaire';
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Escalated';
            ro.setCallback();
            ro.taskObj.Escalation_Reason__c = 'xxxxxx';
            ro.save();
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Pending', wi1.Status__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
            List<String> queue = new List<String>{'LBU_Escalation_Queue','CC_Escalation_Queue','CC_Admin_Team_Queue','Supplier_Management_Advisers_Queue'};
            Group gr = [Select Id from Group where DeveloperName = 'CC_Escalation_Queue' and Type='Queue'];
            system.assertEquals(gr.Id,wi1.OwnerId,gr.Id+'=='+wi1.OwnerId);
            test.stopTest();
        }
    }

    @isTest static void testContactNotesUpdate(){
        User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
            colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
			insert colIns;
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Contact cnt1 = TestDataHelper.createContact(false);
			cnt1.FirstName = 'xyz';
			cnt1.LastName = 'xyz1';
			cnt1.email = 'Account@Account.co.nz';
			cnt1.phone = '987654321';
			cnt1.Address_ID__c = '123';
			cnt1.Legacy_Contact_ID__c = '345';
			cnt1.Mobile_Device_Id__c = '567';
            insert cnt1;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = false;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            test.startTest();
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Courtesy contact';
            wi1.Status__c = 'New';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
			wi1.Contact__c = cnt.Id;
            insert wi1;
            wi1 = [Select Id,Contact__c,Response_Extension_Date__c,Contact__r.Notes__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
            ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			System.assertEquals(ro.wi.Contact__c, wi1.Contact__c);
			ro.wi.Contact__c = cnt1.Id;
			ro.fetchContactNotes();
			ro.contactNotes = 'test notes 123';
 			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = null;
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Sent Replacement Questionnaire';
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Escalated';
            ro.setCallback();
            ro.taskObj.Escalation_Reason__c = 'xxxxxx';
            ro.save();
			ro.cancel();
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Pending', wi1.Status__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
            List<String> queue = new List<String>{'LBU_Escalation_Queue','CC_Escalation_Queue','CC_Admin_Team_Queue','Supplier_Management_Advisers_Queue'};
            Group gr = [Select Id from Group where DeveloperName = 'CC_Escalation_Queue' and Type='Queue'];
            system.assertEquals(gr.Id,wi1.OwnerId,gr.Id+'=='+wi1.OwnerId);
			Task ts = [Select Id,Subject,whoId from Task where whatId=:wi1.Id];
			System.assert(ts.Subject.contains(ro.taskObj.Outcome__c));
			System.assertEquals(ts.WhoId,ro.wi.Contact__c);
			cnt1 = [Select Id,notes__c from contact where id = :cnt1.Id];
			System.assertEquals(cnt1.Notes__c,ro.contactNotes);
            test.stopTest();
        }
    }

	@isTest static void testOutstandingWorkItems(){
        Collection__c col = TestDataHelper.createCollection(true);
        Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,true);
        Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
        //User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        Group queue =  [SELECT ID from Group where type= 'Queue' and developerName = 'Unallocated_Phone_Work_Items'];
        String userId = queue.id;  
        Contact cnt = TestDataHelper.createContact(true);
        Contact cnt1 = TestDataHelper.createContact(false);
		cnt1.firstName = 'abc';
		cnt1.lastName = 'def';
		cnt1.email = 'abc@abc.com';
		cnt1.Address_ID__c = null;
		cnt1.Legacy_Contact_ID__c = null;
		cnt1.Mobile_Device_Id__c = null;
		insert cnt1;
        Unit__c unitObj = TestDataHelper.createUnit(false);
        unitObj.Unit_of_Interest_ID__c ='ENXXX';
        unitObj.Address_Type__c = '--Use Workload Default--';
        unitObj.Other_Address_Type__c = null;
        unitObj.Rural_Delivery_Number__c = null;
        unitObj.Postcode__c = '123';
        unitObj.P_O_Box__c = null;
        unitObj.LBU__c = false;
        unitObj.Assigned__c = false;
        insert unitObj;
            
        Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
        resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
        insert resp;
		resp = [Select Id,Unit_of_Interest__r.Unit_of_Interest_ID__c from Response__c where Id = :resp.Id];

        Response__c resp1 = TestDataHelper.createResponse(colIns.Id, cnt1.Id, null, unitObj.Id, false);
        resp1.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
        insert resp1;
		resp1 = [Select Id,Unit_of_Interest__r.Unit_of_Interest_ID__c from Response__c where Id = :resp1.Id];
        List<Work_Item__c> wiList = new List<Work_Item__c>();
        for(integer i=0;i<10;i++){
            Work_Item__c wi = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi.Delivery_Mode__c = 'Call';
            wi.Work_Item_Type__c = 'Courtesy contact';
            wi.Status__c = 'New';
            wi.Call_Back_Time__c = system.now().addDays(1);
            wi.OwnerId = userId;
            wi.Work_Item_ExtId__c = null;
            wiList.add(wi);
        }
        for(integer i=0;i<10;i++){
            Work_Item__c wi = TestDataHelper.createWorkItem(actSch.Id, cnt1.Id, NULL, resp1.Id, null, false);
            wi.Delivery_Mode__c = 'Call';
            wi.Work_Item_Type__c = 'Courtesy contact';
            wi.Status__c = 'New';
            wi.Call_Back_Time__c = system.now().addDays(1);
            wi.OwnerId = userId;
            wi.Work_Item_ExtId__c = null;
            wiList.add(wi);
        }
        insert wiList;
        Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
        wi1.Delivery_Mode__c = 'Call';
        wi1.Work_Item_Type__c = 'Courtesy contact';
        wi1.Status__c = 'New';
        wi1.Call_Back_Time__c = system.now().addDays(-1);
        wi1.OwnerId = userId;
		wi1.Approval_Status__c = null;
        insert wi1;
        wi1 = [Select Id,OwnerId,RecordTypeId,Unit__c,Outcome__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__r.LBU__c,Work_Item_Type__c,Response_Extension_Date__c,Delivery_Mode__c,Call_Back_Time__c,Approval_Status__c,Contact__r.Notes__c,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c,Escalated__c from Work_Item__c where Id = :wi1.Id];
		Test.startTest();
		{
            Test.setCurrentPageReference(new PageReference('Page.WorkItemsGroupedBy')); 
			//System.currentPageReference().getParameters().put('redirect', 'idVariable');
            ApexPages.StandardController stdCont = new ApexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			ro.includeParentWorkItem = true;
			for(integer i=0; i<ro.collectionUnitsWrapper.size(); i++){ro.collectionUnitsWrapper[i].sel = true;}
			for(integer i=0; i<ro.contactsWrapper.size(); i++){ro.contactsWrapper[i].sel = true;}
			ro.recordOutcomes();
			ro.wi.Contact__c = cnt1.Id;
			ro.fetchContactNotes();
			ro.contactNotes = 'test notes 123';
 			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = null;
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Sent Replacement Questionnaire';
            ro.setCallback();
            ro.taskObj.Outcome__c = 'Data Taken Over The Phone - PDF/Paper';
            ro.setCallback();
			ro.partialData = true;
			ro.taskObj.New_Call_Back_Time__c = System.now().addDays(2);
            ro.save();
            wi1 = [Select Id,OwnerId,Status__c,Outcome__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__r.LBU__c,Work_Item_Type__c,Delivery_Mode__c,Call_Back_Time__c,Unit__c,Approval_Status__c,Contact__r.Notes__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c,Escalated__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Completed', wi1.Status__c);
            system.assertEquals(false,wi1.Contact__r.Assigned__c);
            system.assertEquals(false,wi1.Response__r.Unit_of_Interest__r.Assigned__c);
            /*List<String> queue = new List<String>{'LBU_Escalation_Queue','CC_Escalation_Queue','CC_Admin_Team_Queue','Supplier_Management_Advisers_Queue'};
            Group gr = [Select Id from Group where DeveloperName = 'CC_Escalation_Queue' and Type='Queue'];
            system.assertEquals(gr.Id,wi1.OwnerId,gr.Id+'=='+wi1.OwnerId);*/
			Task ts = [Select Id,Subject,whoId from Task where whatId=:wi1.Id];
			System.assert(ts.Subject.contains(ro.taskObj.Outcome__c));
			System.assertEquals(ts.WhoId,ro.wi.Contact__c);
			cnt1 = [Select Id,notes__c from contact where id = :cnt1.Id];
			System.assertEquals(cnt1.Notes__c,ro.contactNotes);
			List<Task> tsList = [Select Id from Task];
			System.assertEquals(21,tsList.size());
			resp = [Select Id,Status__c,Response_Status_Reason__c from Response__c where Id = :resp.Id];
			System.assertEquals('On hold',resp.Status__c);
			System.assertEquals('Data Received',resp.Response_Status_Reason__c);
			ro.cancelBulk();
			ro.interactionLog();
		}
		Test.stopTest();
	}
    @isTest static void testInboundEnquryWorkItemOutcome(){
          User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        system.runAs(userObj){
            Collection__c col = TestDataHelper.createCollection(true);
            Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
            colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
			insert colIns;
            Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
            User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
            Contact cnt = TestDataHelper.createContact(false);
            cnt.Assigned__c = false;
            insert cnt;
            Unit__c unitObj = TestDataHelper.createUnit(false);
            unitObj.Unit_of_Interest_ID__c ='ENXXX';
            unitObj.Address_Type__c = '--Use Workload Default--';
            unitObj.Other_Address_Type__c = null;
            unitObj.Rural_Delivery_Number__c = null;
            unitObj.Postcode__c = '123';
            unitObj.P_O_Box__c = null;
            unitObj.LBU__c = false;
            unitObj.Assigned__c = false;
            insert unitObj;
            Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
            resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
            resp.Extension_Date__c = system.today().addDays(-2);
            insert resp;
            Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
            wi1.Delivery_Mode__c = 'Call';
            wi1.Work_Item_Type__c = 'Inbound Enquiry';
            wi1.Status__c = 'New';
            wi1.Enquiry_Origin__c = 'Email';
			wi1.Approval_Status__c='Approved';
            wi1.Call_Back_Time__c = system.now().addDays(-1);
            wi1.OwnerId = userObj.Id;
            insert wi1;
            wi1 = [Select Id,Response_Extension_Date__c,Contact__r.Notes__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi1.Id];
            test.startTest();
            Test.setCurrentPageReference(new PageReference('Page.RecordOutcomesNew')); 
			System.currentPageReference().getParameters().put('redirect', 'idVariable');
			ApexPages.StandardController stdCont = new APexPages.StandardController(wi1);
            RecordOutcomesNewExCon ro = new RecordOutcomesNewExCOn(stdCont);
			ro.taskObj = new Task();
            ro.taskObj.Outcome__c = 'No Further Action Required';
            ro.setCallback();
            wi1.Response__r.Extension_Date__c = system.today().addDays(10);
            ro.save();
            test.stopTest();
            system.assertEquals(system.today().addDays(10), wi1.Response__r.Extension_Date__c);
            //system.assertEquals(wi1.Response__r.Extension_Date__c , wi1.Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,wi1.Response__r.Collection_Instance__r.Extension_Cut_off_Date__c);
            wi1 = [Select Id,OwnerId,Status__c,Response__r.Extension_Date__c,Completed_Date_Time__c,Contact__c,Contact__r.Assigned__c,Response__r.RecordType.Name,Response__c,Response__r.Unit_of_Interest__c,Response__r.Unit_of_Interest__r.Assigned__c from Work_Item__c where Id = :wi1.Id];
            system.assertEquals('Completed', wi1.Status__c);
            
        }
	}
	@isTest static void BulkInteractionLogTest(){
		User userObj = TestDataHelper.createUser( 'Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        Collection__c col = TestDataHelper.createCollection(true);
        Collection_Instance__c colIns = TestDataHelper.createCollectionInstance(col.Id,false);
        colIns.Extension_Cut_off_Date__c = system.today().addDays(10);
		insert colIns;
        Activity_Schedule__c actSch = TestDataHelper.createActivitySchedule(colIns.Id,true);
        User userObj1 = TestDataHelper.createUser( '1Test' + datetime.now().getTime()+'@gmail.com','System Administrator',true);
        Contact cnt = TestDataHelper.createContact(false);
        cnt.Assigned__c = false;
        insert cnt;
        Contact cnt1 = TestDataHelper.createContact(false);
		cnt1.FirstName = 'xyz';
		cnt1.LastName = 'xyz1';
		cnt1.email = 'Account@Account.co.nz';
		cnt1.phone = '987654321';
		cnt1.Address_ID__c = '123';
		cnt1.Legacy_Contact_ID__c = '345';
		cnt1.Mobile_Device_Id__c = '567';
        insert cnt1;
        Unit__c unitObj = TestDataHelper.createUnit(false);
        unitObj.Unit_of_Interest_ID__c ='ENXXX';
        unitObj.Address_Type__c = '--Use Workload Default--';
        unitObj.Other_Address_Type__c = null;
        unitObj.Rural_Delivery_Number__c = null;
        unitObj.Postcode__c = '123';
        unitObj.P_O_Box__c = null;
        unitObj.LBU__c = false;
        unitObj.Assigned__c = false;
        insert unitObj;
        Response__c resp = TestDataHelper.createResponse(colIns.Id, cnt.Id, null, unitObj.Id, false);
        resp.RecordTypeId = Response__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Business Response').getRecordTypeId();
        resp.Extension_Date__c = system.today().addDays(-2);
        insert resp;
		Work_Item__c wi = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
		wi.Delivery_Mode__c = 'Call';
		wi.Work_Item_Type__c = 'Courtesy contact';
		wi.Status__c = 'New';
		wi.Call_Back_Time__c = system.now().addDays(-1);
		wi.OwnerId = userObj.Id;
		wi.Contact__c = cnt.Id;
		insert wi;
		List<Work_Item__c> wiList = new List<Work_Item__c>();
		for (Integer i = 0; i < 10; i++){
			Work_Item__c wi1 = TestDataHelper.createWorkItem(actSch.Id, cnt.Id, NULL, resp.Id, null, false);
			wi1.Delivery_Mode__c = 'Call';
			wi1.Work_Item_Type__c = 'Courtesy contact';
			wi1.Status__c = 'New';
			wi1.Call_Back_Time__c = system.now().addDays(-1);
			wi1.OwnerId = userObj.Id;
			wi1.Contact__c = cnt.Id;
			wi1.Mobile_Device_Id__c = String.valueOf(i);
			wi1.Work_Item_ExtId__c = String.valueOf(i);
			wiList.add(wi1);
		}
        insert wiList;
		List<Task> ts = [Select Id from Task];
		System.assertEquals(0,ts.size());
        wi = [Select Id,Contact__r.Notes__c,Response_Extension_Date__c,Response__r.Unit_of_Interest__r.Notes__c,Response__r.Unit_of_Interest__c,Response__r.Contact__c,Approval_Status__c,Response__r.Collection_Instance__r.Extension_Cut_off_Date__c,Delivery_Mode__c,Work_Item_Type__c,Response__r.Extension_Date__c,Response__r.RecordType.Name,Response__r.Unit_of_Interest__r.LBU__c,Response__r.Unit_of_Interest__r.Assigned__c,Response__c,Contact__r.Assigned__c,Name from Work_Item__c where Id = :wi.Id];
		Test.startTest();
		{
            Test.setCurrentPageReference(new PageReference('Page.BulkInteractionLog')); 
			System.currentPageReference().getParameters().put('redirect', 'bulkInteraction');
            ApexPages.StandardController stdCont = new ApexPages.StandardController(wi);
            RecordOutcomesNewExCon ie = new RecordOutcomesNewExCOn(stdCont);
			ie.includeParentWorkItem = false;
			ie.selectedWorkItems = wiList;
			//ie.taskObj.System_Contact__c = cnt1.Id;
			ie.taskObj.Subject__c = 'Feedback';
			//ie.processOutcome();
			ie.taskObj.Feedback_Type__c = 'Questionnaire';
			ie.taskObj.Description = 'abc';
            ie.taskObj.Escalated__c = true;
			ie.saveInteractionLog();
			ts = [Select Id from Task];
			System.assertEquals(10,ts.size());
			ie = new RecordOutcomesNewExCOn(stdCont);
			ie.includeParentWorkItem = true;
			wiList.add(wi);
			ie.selectedWorkItems = wiList;
			ie.taskObj.System_Contact__c = cnt1.Id;
			ie.taskObj.Subject__c = 'Grant Extension';
			//ie.processOutcome();
			ie.workItem.Response__r.Extension_Date__c = System.today().addDays(-1);
			ie.saveInteractionLog();
			ie.workItem.Response__r.Extension_Date__c = System.today().addDays(11);
			ie.saveInteractionLog();
			ie.workItem.Response__r.Extension_Date__c = System.today().addDays(10);
			ie.saveInteractionLog();
			ts = [Select Id from Task];
			System.assertEquals(21,ts.size());
			ie = new RecordOutcomesNewExCOn(stdCont);
			ie.includeParentWorkItem = false;
			ie.selectedWorkItems = wiList;
			ie.taskObj.System_Contact__c = cnt1.Id;
			ie.taskObj.Subject__c = 'Data Taken Over The Phone - PDF/Paper';
			//ie.processOutcome();
			ie.saveInteractionLog();
			resp = [Select Id,Status__c,Response_Status_Reason__c from Response__c];
			System.assertEquals('On hold',resp.Status__c);
			System.assertEquals('Data Received',resp.Response_Status_Reason__c);
			ts = [Select Id from Task];
			System.assertEquals(32,ts.size());
			ie.cancelInteractionLog();
		}
		Test.stopTest();
	}
}